// Code generated by mockery v2.43.0. DO NOT EDIT.

package tfemock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tfe "github.com/hashicorp/go-tfe"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateRun provides a mock function with given fields: ctx, options
func (_m *Client) CreateRun(ctx context.Context, options tfe.RunCreateOptions) (*tfe.Run, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for CreateRun")
	}

	var r0 *tfe.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tfe.RunCreateOptions) (*tfe.Run, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tfe.RunCreateOptions) *tfe.Run); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tfe.RunCreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuns provides a mock function with given fields: ctx, workspaceID, options
func (_m *Client) ListRuns(ctx context.Context, workspaceID string, options *tfe.RunListOptions) (*tfe.RunList, error) {
	ret := _m.Called(ctx, workspaceID, options)

	if len(ret) == 0 {
		panic("no return value specified for ListRuns")
	}

	var r0 *tfe.RunList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.RunListOptions) (*tfe.RunList, error)); ok {
		return rf(ctx, workspaceID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.RunListOptions) *tfe.RunList); ok {
		r0 = rf(ctx, workspaceID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.RunList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *tfe.RunListOptions) error); ok {
		r1 = rf(ctx, workspaceID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaces provides a mock function with given fields: ctx, organization, options
func (_m *Client) ListWorkspaces(ctx context.Context, organization string, options *tfe.WorkspaceListOptions) (*tfe.WorkspaceList, error) {
	ret := _m.Called(ctx, organization, options)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 *tfe.WorkspaceList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.WorkspaceListOptions) (*tfe.WorkspaceList, error)); ok {
		return rf(ctx, organization, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *tfe.WorkspaceListOptions) *tfe.WorkspaceList); ok {
		r0 = rf(ctx, organization, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.WorkspaceList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *tfe.WorkspaceListOptions) error); ok {
		r1 = rf(ctx, organization, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadRun provides a mock function with given fields: ctx, runID
func (_m *Client) ReadRun(ctx context.Context, runID string) (*tfe.Run, error) {
	ret := _m.Called(ctx, runID)

	if len(ret) == 0 {
		panic("no return value specified for ReadRun")
	}

	var r0 *tfe.Run
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*tfe.Run, error)); ok {
		return rf(ctx, runID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *tfe.Run); ok {
		r0 = rf(ctx, runID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tfe.Run)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, runID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
